/*
 * Google Test Framework
 * Sample Unit Tests
 */

#include "gtest/gtest.h"
#include "partone.cpp"

using namespace std;

class MemoryTest : public testing::Test {
protected:
	MemoryTest(void) { }
	~MemoryTest(void) { }
	virtual void SetUp(void) { }
	virtual void TearDown(void) { }

	Memory memory;
};

TEST_F(MemoryTest, LoadMemoryTest)
{
	memory.LoadMemory();

	char s[1024];

	for (size_t i = 0; i < 512; ++i)
	{
		sprintf(s + 2 * i, "%02X", memory.memory[i]);
	}

	s);
}

class StringTest : public testing::Test {
protected:
	StringTest(void) : s1("Hello World!"), p1(NULL) { }
	~StringTest(void) { }

	// Set up fixtures ONCE for EACH unit test.
	virtual void SetUp(void) {
		p1 = new string("Good-bye.");
	}

	// Clean up fixtures after EACH unit test is done running.
	virtual void TearDown(void) {
		delete p1;
	}

	string s1;
	string *p1;
};

// Unit test with a fixture (i.e., a pre-created object.)
TEST_F(StringTest, CompareStringTest)
{
	// Stops running unit tests if this statement fails.
	ASSERT_STREQ("Hello World!", s1.c_str());
}

TEST_F(StringTest, LengthTest)
{
	// Continues running unit tests even if this statement fails.
	EXPECT_EQ(9, p1->length());
}

class BoolTest : public testing::Test
{

};

// Unit Test without a fixture.
TEST(BoolTest, TrueTest)
{
	ASSERT_TRUE(true);
}
